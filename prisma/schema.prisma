// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id       Int       @id @default(autoincrement())
  email    String    @unique @db.VarChar(256)
  fname    String    @db.VarChar(256)
  lname    String    @db.VarChar(256)
  password String    @db.VarChar(256)
  reviews  reviews[]
}

model publisher {
  id        Int         @id @default(autoincrement())
  email     String      @unique @db.VarChar(256)
  fname     String      @db.VarChar(256)
  lname     String      @db.VarChar(256)
  phone     String      @unique @db.VarChar(256)
  company   String      @default("null") @db.VarChar(256)
  status    Status      @default(Pending)
  password  String      @db.VarChar(256)
  books     books[]
  bookadder bookadder[]
  Request   Request[]
}

enum Status {
  Accept
  Pending
  reject
}

model admin {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(256)
  fname    String @db.VarChar(256)
  lname    String @db.VarChar(256)
  password String @db.VarChar(256)
  role     Role   @default(admin)
}

enum Role {
  master
  admin
}

model author {
  id    Int    @id @default(autoincrement())
  fname String @db.VarChar(256)
  lname String @db.VarChar(256)
}

model category {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  books     books[]
  bookrank  bookrank[]
  bookadder bookadder[]
}

model books {
  id           Int        @id @default(autoincrement())
  title        String     @db.Text
  author       String     @db.VarChar(256)
  categoryid   Int
  publisherid  Int
  description  String     @db.Text
  puplisherRel publisher  @relation(fields: [publisherid], references: [id])
  categoryRel  category   @relation(fields: [categoryid], references: [id])
  reviews      reviews[]
  bookrank     bookrank[]
}

model bookadder {
  id            Int       @id @default(autoincrement())
  title         String    @db.Text
  author        String    @db.VarChar(256)
  categoryid    Int
  publisherid   Int
  publisheddate DateTime  @default(now())
  description   String    @db.Text
  puplisherRel  publisher @relation(fields: [publisherid], references: [id])
  categoryRel   category  @relation(fields: [categoryid], references: [id])
}

model bookrank {
  id          Int      @id @default(autoincrement())
  bookid      Int
  sold        Int
  rate        Int
  category    String
  bookrel     books    @relation(fields: [bookid], references: [id])
  categoryrel category @relation(fields: [category], references: [name])
}

model reviews {
  id      Int      @id @default(autoincrement())
  userid  Int
  bookid  Int
  review  Int
  date    DateTime
  userrel user     @relation(fields: [userid], references: [id])
  bookrel books    @relation(fields: [bookid], references: [id])
}

model Request {
  id           Int       @id @default(autoincrement())
  publisherID  Int
  requset      req
  publisherREl publisher @relation(fields: [publisherID], references: [id])
}

enum req {
  update
  delete
}
